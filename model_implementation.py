from io import BytesIO
import telebot
from PIL import Image
import numpy as np
import tensorflow as tf
from telebot.states import State, StatesGroup
from telebot.storage import StateMemoryStorage
from telebot.states.sync.middleware import StateMiddleware
from telebot.states.sync.context import StateContext
from telebot import custom_filters

TOKEN = ''

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_storage = StateMemoryStorage()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = tf.keras.models.load_model('beta_binary_classifier.h5')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, state_storage=state_storage, use_class_middlewares=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
class UploadStates(StatesGroup):
    waiting_for_file = State()
    processing_file = State()

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def preprocess_image(file_bytes):
    try:
        image = Image.open(BytesIO(file_bytes))
        image = image.convert('L').resize((512, 512), resample=Image.Resampling.LANCZOS)
        image_array = np.expand_dims(np.expand_dims(np.array(image), axis=-1), axis=0)
        return image_array
    except Exception as e:
        return None

# –ö–æ–º–∞–Ω–¥–∞: /start
@bot.message_handler(commands=['start'])
def start_handler(msg):
    bot.send_message(msg.chat.id, (
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤.\n'
        '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n'
        '–ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö.'
    ))

# –ö–æ–º–∞–Ω–¥–∞: /upload
@bot.message_handler(commands=['upload'])
def upload(msg, state: StateContext):
    state.set(UploadStates.waiting_for_file)
    bot.send_message(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.')

# –•—ç–Ω–¥–ª–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
@bot.message_handler(state=UploadStates.waiting_for_file, content_types=['photo', 'document'])
def photo_handler(msg, state: StateContext):
    file_id = None
    if msg.photo:
        file_id = msg.photo[-1].file_id
    elif msg.document:
        if msg.document.file_name.split(".")[-1].lower() not in ['jpg', 'jpeg', 'png']:
            bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.")
            return
        file_id = msg.document.file_id

    if not file_id:
        bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.")
        return

    bot.send_message(msg.chat.id, "–°–ø–∞—Å–∏–±–æ! –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    bot.send_chat_action(msg.chat.id, 'typing')
    state.set(UploadStates.processing_file)

    try:
        file_info = bot.get_file(file_id)
        file_bytes = bot.download_file(file_info.file_path)
        processed_image = preprocess_image(file_bytes)
        if processed_image is None:
            raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        prediction = model.predict(processed_image)
        result = ('–ø–µ—Ä–µ–ª–æ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.' if prediction[0][0] >= 0.7 else '–ø–µ—Ä–µ–ª–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        bot.send_message(msg.chat.id, f'–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞ —Å–Ω–∏–º–∫–µ {result}')
    except Exception as e:
        bot.send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        state.delete()

# –ö–æ–º–∞–Ω–¥–∞: /status
@bot.message_handler(commands=['status'])
def check_status(msg, state: StateContext):
    current_state = state.get()
    if current_state == UploadStates.processing_file:
        bot.send_message(msg.chat.id, '–ê–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
    else:
        bot.send_message(msg.chat.id, '–í—ã –Ω–µ –≤—ã–∑–≤–∞–ª–∏ /upload.')

# –ö–æ–º–∞–Ω–¥–∞: /help
@bot.message_handler(commands=['help'])
def show_help(msg):
    help_text = (
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üîπ /upload - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "üîπ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞\n"
        "üîπ /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"
    )
    bot.send_message(msg.chat.id, help_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞: /feedback
@bot.message_handler(commands=['feedback'])
def send_feedback_form(msg):
    markup = telebot.types.InlineKeyboardMarkup()
    for i in range(1, 6):
        markup.add(telebot.types.InlineKeyboardButton(f"‚≠êÔ∏è" * i, callback_data=f"rating_{i}"))
    bot.send_message(msg.chat.id, "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("rating_"))
def process_rating(call):
    rating = call.data.split("_")[1]
    with open("feedback.txt", "a", encoding="utf-8") as f:
        f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id}: {rating} –∑–≤–µ–∑–¥\n")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                          text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∑–≤–µ–∑–¥.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ middleware (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–ª–æ—è)
bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.setup_middleware(StateMiddleware(bot))

# –ü–æ–ª–ª–∏–Ω–≥
bot.polling(none_stop=True, long_polling_timeout=60, timeout=20, interval=1)
