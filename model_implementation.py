from io import BytesIO
import telebot
from PIL import Image
import numpy as np
import tensorflow as tf
from telebot.states import State, StatesGroup
from telebot.storage import StateMemoryStorage
from telebot.states.sync.middleware import StateMiddleware
from telebot.states.sync.context import StateContext
from telebot import custom_filters


TOKEN = '7729564646:AAHy-_9E2djmtOdldwTiCxOdd6_9PDeEKX0'

state_storage = StateMemoryStorage()

model = tf.keras.models.load_model('beta_binary_classifier.h5')

bot = telebot.TeleBot(TOKEN, state_storage=state_storage, use_class_middlewares=True)


class UploadStates(StatesGroup):
    waiting_for_file = State()
    processing_file = State()


class PhotoStates(StatesGroup):
    waiting_for_photo = State()
    resizing_photo = State()


@bot.message_handler(commands=['start'])
def start_handler(msg):
    bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤.'
                                  '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Å –µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–º.'
                                  ' –ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö.')


@bot.message_handler(commands=['upload'])
def upload(msg, state: StateContext):
    state.set(UploadStates.waiting_for_file)
    bot.send_message(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.')


@bot.message_handler(state=UploadStates.waiting_for_file, content_types=['photo', 'text', 'document'])
def photo_handler(msg, state: StateContext):
    if msg.text:
        bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.")
        return

    elif msg.document:
        file_extension = msg.document.file_name.split(".")[-1].lower()
        if file_extension not in ['jpg', 'jpeg', 'png']:
            bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.")
            return
        file_id = msg.document.file_id

    elif msg.photo:
        file_id = msg.photo[-1].file_id
    
    bot.send_message(msg.chat.id, "–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫."
                                    "–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    bot.send_chat_action(msg.chat.id, 'typing')
    state.set(UploadStates.processing_file)

    
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    image = Image.open(BytesIO(downloaded_file))
    try:
        image = Image.open(BytesIO(downloaded_file))
        modified_image = image.convert('L').resize((512, 512), resample=Image.Resampling.LANCZOS)
    except Exception as e:
        bot.send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.")
        state.delete()
        return

    modified_image = image.convert('L').resize((512, 512), resample=Image.Resampling.LANCZOS)

    image_array = np.array(modified_image)
    image_array1 = np.expand_dims(image_array, axis=-1)
    image_array2 = np.expand_dims(image_array1, axis=0)

    try:
        prediction = model.predict(image_array2)
    except Exception as e:
        bot.send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    finally:
        state.delete()
        


    if prediction[0][0] >= 0.7:
        bot.send_message(msg.chat.id,
                            '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!'
                            '–ù–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–º —Å–Ω–∏–º–∫–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–ª–æ–º.')
    else:
        bot.send_message(msg.chat.id,
                            '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–º —Å–Ω–∏–º–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–ª–æ–º.')

    state.delete()
    return


@bot.message_handler(commands=['status'])
def check_status(msg, state: StateContext):
    current_state = state.get()
    if current_state == 'UploadStates:processing_file':
        bot.send_message(msg.chat.id, '–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–Ω–∏–º–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. '
                                      '–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.' 
                                      '–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 1 –¥–æ 5 –º–∏–Ω—É—Ç.')
    else:
        bot.send_message(msg.chat.id, '–í—ã –Ω–µ –≤—ã–∑–≤–∞–ª–∏ /upload.')


@bot.message_handler(commands=['help'])
def show_help(msg):
    help_text = (
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üîπ /upload - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "üîπ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞\n"
        "üîπ /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"
    )
    bot.send_message(msg.chat.id, help_text, parse_mode='Markdown')


@bot.message_handler(commands=['feedback'])
def send_feedback_form(message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚≠êÔ∏è", callback_data="rating_1"),
               telebot.types.InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è", callback_data="rating_2"),
               telebot.types.InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="rating_3"),
               telebot.types.InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="rating_4"),
               telebot.types.InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="rating_5"))
    bot.reply_to(message, "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("rating_"))
def process_rating(call):
    rating = call.data.split("_")[1]
    with open("feedback.txt", "a", encoding="utf-8") as f:
        f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id}: {rating} –∑–≤–µ–∑–¥\n")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                          text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∑–≤–µ–∑–¥.")


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.setup_middleware(StateMiddleware(bot))

bot.polling(none_stop=True, long_polling_timeout=60, timeout=20, interval=1)
